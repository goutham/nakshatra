#ifndef PIECE_H
#define PIECE_H

#include "common.h"
#include "piece_values.h"

#include <array>

namespace standard {

// clang-format off
constexpr int PST_KING_MGAME[] = {
  0, -12,  -9, -19, -19,  -9, -22,  -2, 
  0,  -9,  -9, -19, -19,  -9,  -9,   1, 
 -8,  -9,  -9, -19, -19,  -9,  -9,   1, 
  1,  -9,  -9, -25, -20,  -9,  -9,   1, 
-10, -10, -14, -16, -13,  -2,   1,  -5, 
-29, -40, -47, -18,   6,   8, -50,   5, 
 19,   1, -22, -31, -31, -31,  11,  31, 
  7,  42,  -8, -31,   2, -21,  40,  -6, 
};

constexpr int PST_QUEEN_MGAME[] = {
 10,  19,  21,  -2,  26,  21,  21, -35, 
-15, -23,  29,  31,  31,  31,  15,  21, 
-26, -31,  19,  -8,  36,  36,  31,  21, 
-15,   7,  -5,  36,  36,  27,  31,  22, 
 -3, -31, -11, -13, -13,  18,  14,  25, 
-35,   8,  -6,   2,  12,  32,  -4,   6, 
-30, -31,  -1, -10,  -4,  13,  15,   9, 
 -1, -20,  -1, -21,   5, -29, -25, -51, 
};

constexpr int PST_ROOK_MGAME[] = {
-10,  11, -27,  30, -14,   9,  17, -26, 
 27,  10,  31,  33,  41,  34,  38,  33, 
 26,  10,  31,  31,  31,  28,   1,  26, 
-28,  11,  -4,  25,  30,   6,  29,  26, 
-17, -12,   0, -29,   3,  31,   9,   3, 
-14, -31, -31, -31, -14, -28, -11, -36, 
-36, -31, -21, -31, -18,   1, -22, -36, 
-14, -18, -11, -14,  -7,  -7, -31, -27, 
};

constexpr int PST_BISHOP_MGAME[] = {
-14, -41,   3, -24, -17,  -2,  21, -50, 
 11,  14,  18,  25,  21,  11, -28, -41, 
-20, -31,  36,  -3,  41,  35,  31, -28, 
 19,  21,  33,  41,   4,   9, -22, -25, 
-29,   4,  -2,  38, -13,  11,  25,   4, 
-34,  -3,  40,  -3, -12,  -9,  10, -32, 
-21, -13,  28, -31, -12, -27,   6,  -6, 
-51,   2, -26, -41, -33, -32, -28, -27, 
};

constexpr int PST_KNIGHT_MGAME[] = {
-72, -71, -61, -22,   1, -29, -41, -26, 
-21,  11,  -3,  31, -31,  31, -36, -10, 
-16, -31,  -7,  46,  41,  32,  31, -24, 
 -9, -25,  40,  51,  39,  46,  11,   1, 
  0, -12,  16,  14,   6,  31,  31, -21, 
-12,  15,  -9,  26,   2,  -4,  12, -60, 
-63,   9,  -2,  -8,  10, -27, -16, -71, 
-73, -53, -60, -24, -28, -22, -71, -66, 
};

constexpr int PST_PAWN_MGAME[] = {
  0,   0,   0,   0,   0,   0,   0,   0, 
 81,  81,  81,  81,  81,  81,  81,  81, 
 -3,  41,  51,  61,  58,  37,  41,  33, 
-12,  12,   1,  -4,   2, -13,  -9, -19, 
-15,  -6, -14,  11, -11, -12,  -4, -16, 
-15,  -3, -21,   6, -13,  -6,  11,  -7, 
-13,  -1, -10, -20, -51,  29,  33, -23, 
  0,   0,   0,   0,   0,   0,   0,   0, 
};

constexpr int PST_KING_EGAME[] = {
-19,  -9,   1,  11,  11,   1,  -9, -19, 
  1,  11,  21,  31,  31,  21,  11,   1, 
  1,  21,  51,  61,  61,  51,  21,   1, 
  1,  21,  61,  60,  69,  61,  21,   1, 
-10,  21,  51,  58,  58,  49,  21,   1, 
-28,  -6,  26,  40,  48,  26,   6, -13, 
-61, -57, -18, -11,  -9, -14, -38, -51, 
-78, -58, -61, -21, -45, -42, -61, -46, 
};

constexpr int PST_QUEEN_EGAME[] = {
  7,  21,  21,  26,  26,  21,  21,   7, 
 15,  31,  31,  31,  30,  31,  28,  21, 
 11,  22,  33,   8,  35,  36,  31,  21, 
  3,  28,  28,  36,  36,  36,  28,  26, 
-16, -31,  24,  36,  35,  30,  29,  20, 
  0,  -6,   4,  -2, -13,  23,  -1, -31, 
-27,   1,  -9,  -5,   5,  -9,  -3, -38, 
  3, -41, -29,  -8, -27, -37, -24, -51, 
};

constexpr int PST_ROOK_EGAME[] = {
  1,  13,  25,  -4,   3,  -4,  21,  12, 
 18,  30,  17,  14,  17,  10,  26,   4, 
 23,  27,  23,  13,  15,   7,  21,  -9, 
  1,   6,  21,  12,  -8,   8,  -2,  -5, 
-12,   7,  -1,  10,  -5,   1, -10, -31, 
-13,  11,   3,   4, -10,   1,   2, -34, 
-14,   4,  -9,   5, -16,  -4,   4, -10, 
-20, -16, -21,  -6,  -4, -28, -15, -20, 
};

constexpr int PST_BISHOP_EGAME[] = {
  3,  21, -11, -21,  -3, -14, -39, -31, 
  8,  11,   1,  -6,  14,   3, -27, -41, 
  1, -11,  11,  15, -17,  17,  -9,  -3, 
 -6,  20,   5,   3,  24,   6,   2,  -7, 
-12,  10,   1,   5,  -3,   5,  -9, -25, 
-24,   0,   7,  -9,  27,  10, -21,   8, 
-25,  -6, -30,  -6, -17,  -6,   8, -41, 
-51, -20, -20, -12, -20,  -8,   6, -39, 
};

constexpr int PST_KNIGHT_EGAME[] = {
-55, -28,  -7, -25, -12, -39, -66, -81, 
-11, -25, -17,  -3, -31, -28, -24, -23, 
  1, -15,  32,  10,  10, -11, -18, -57, 
  1, -19,   0,  -5,  -8, -11, -11,  -9, 
-40,   1,   0,  -9,  22, -11, -24, -16, 
-55,  -8,  12, -14, -13,  -6, -19, -56, 
-52, -49, -17, -18, -24, -19, -50, -69, 
-19, -50, -39, -52, -53, -50, -68, -81, 
};

constexpr int PST_PAWN_EGAME[] = {
  0,   0,   0,   0,   0,   0,   0,   0, 
 81,  81,  81,  81,  81,  81,  81,  81, 
 41,  41,  51,  61,  36,  21,  20,  38, 
 36,  22,  35,  -3,  -6, -18,   1, -15, 
 24,  21, -10, -11, -11, -23, -12, -25, 
 17,  -7,   3,  10,   2, -14, -10, -16, 
 16,  12,  19, -20, -39, -13, -15, -18, 
  0,   0,   0,   0,   0,   0,   0,   0, 
};
// clang-format on

constexpr const int* PST_MGAME[7] = {
    nullptr,          PST_KING_MGAME,   PST_QUEEN_MGAME, PST_ROOK_MGAME,
    PST_BISHOP_MGAME, PST_KNIGHT_MGAME, PST_PAWN_MGAME};

constexpr const int* PST_EGAME[7] = {
    nullptr,          PST_KING_EGAME,   PST_QUEEN_EGAME, PST_ROOK_EGAME,
    PST_BISHOP_EGAME, PST_KNIGHT_EGAME, PST_PAWN_EGAME};


constexpr int PSTVal(Side side, Piece piece, int sq) {
  return PST_MGAME[PieceType(piece)][(side == Side::WHITE) ? (sq ^ 56) : sq];
}

} // namespace standard

#endif
