#ifndef PIECE_H
#define PIECE_H

#include "common.h"
#include "std_eval_params.h"

#include <array>

namespace standard {

// clang-format off
constexpr std::array<int, 64> PST_KING_MGAME = {
-88, 226, 196, 106, -136, -68,  67,  50, 
146,  62,  35, 173,  56,  64, -23, -168, 
 71,  90,  99,  13,  66, 117, 136, -15, 
 -4, -41,  14, -38, -13, -27,   3, -59, 
-62,  23, -47, -97, -109, -66, -63, -79, 
 43,   5, -30, -66, -71, -49,  -6, -28, 
 35,  27,  -4, -72, -51, -18,  35,  37, 
  5,  67,  29, -69,  18, -29,  53,  49, 
};

constexpr std::array<int, 64> PST_QUEEN_MGAME = {
-12,  -3,   5,  11, 131, 149,  56,  45, 
-18, -46,   3, -13, -24,  59,  37,  64, 
-22, -16,   4,   1,  34,  62,  65,  70, 
-44, -35, -17, -16, -14,   9, -12,  -3, 
 -6, -34,  -8, -12,  -5,  -5,   2,   0, 
-16,   5,  -9,  -2,  -5,   3,  17,  -4, 
-39, -10,  16,   3,  10,  24, -14,   2, 
 -2, -20, -10,  16, -17, -32, -33, -69, 
};

constexpr std::array<int, 64> PST_ROOK_MGAME = {
 43,  65,  34, 100,  87, -18,   8,  29, 
 31,  33,  85,  90, 114, 105,  23,  48, 
-20,  18,  18,  39,  16,  68,  95,  16, 
-32, -15,   1,  21,  17,  50,  -2, -35, 
-50, -37, -14,  -8,   0, -10,  11, -30, 
-56, -30, -19, -26,  -4,  -6,  -3, -45, 
-55, -20, -28, -18, -10,   4, -15, -78, 
-27, -21,  -4,   7,   9,  -5, -37, -27, 
};

constexpr std::array<int, 64> PST_BISHOP_MGAME = {
-45,   4, -98, -47, -60, -18, -14,  16, 
-26,  21, -12, -23,  52,  54,  27, -47, 
-12,  47,  51,  58,  44,  75,  31,  -2, 
  3,  16,  20,  61,  48,  51,  14,   5, 
 -4,  19,  19,  32,  40,  20,  21,   9, 
  7,  18,  23,  23,  19,  36,  23,  12, 
  4,  23,  19,   5,  14,  31,  44,   9, 
-33,   1,  -9, -19, -14,  -8, -42, -24, 
};

constexpr std::array<int, 64> PST_KNIGHT_MGAME = {
-213, -94, -63, -82,  70, -123, -28, -160, 
-107, -58,  66,  15,  18,  61,   1,  -5, 
-74,  68,  39,  68, 102, 142,  78,  32, 
-20,  12,   9,  52,  33,  74,   9,  12, 
-24,  -9,   7,   4,  22,  15,   5, -21, 
-33, -24,   6,   4,  13,  10,  15, -26, 
-48, -80, -25, -12, -11,  11, -34, -27, 
-148, -32, -76, -54, -27, -39, -28, -27, 
};

constexpr std::array<int, 64> PST_PAWN_MGAME = {
  0,   0,   0,   0,   0,   0,   0,   0, 
 99, 161,  95, 155,  96, 154,  39, -35, 
-22,  -1,  24,  36,  76,  69,  23, -26, 
-30,   9,   3,  19,  23,  12,  16, -33, 
-44, -10, -11,  10,  15,   7,   9, -35, 
-42, -11, -10, -17,   0,   2,  35, -22, 
-53,  -8, -29, -33, -21,  25,  41, -32, 
  0,   0,   0,   0,   0,   0,   0,   0, 
};

constexpr std::array<int, 64> PST_KING_EGAME = {
-63, -76, -56, -53,  12,  19,  -2, -24, 
-48,   3,   5, -24,   4,  29,  23,  41, 
 -8,   3,   6,  10,   2,  27,  23,  11, 
-13,  29,  18,  32,  24,  39,  24,   7, 
-23, -13,  26,  40,  46,  31,  20,  -4, 
-37, -10,  13,  29,  34,  24,   6,  -7, 
-45, -22,   3,  19,  20,   7, -15, -31, 
-69, -57, -32,  -8, -40, -13, -43, -70, 
};

constexpr std::array<int, 64> PST_QUEEN_EGAME = {
-17,  35,  48,  43, -18, -44,  -6,  34, 
 -5,  37,  47,  73,  88,  32,  33,   0, 
 -5,  18,  18,  63,  62,  46,  31,  -4, 
 31,  48,  41,  61,  92,  64,  87,  56, 
-21,  48,  32,  67,  45,  52,  59,  26, 
 -8, -30,  25,  17,  23,  29,  13,  27, 
-17, -19, -32, -10,  -7, -24, -24, -33, 
-28, -21, -15, -54,  -2, -22,  -1, -27, 
};

constexpr std::array<int, 64> PST_ROOK_EGAME = {
 20,  11,  26,   9,  10,  32,  23,  15, 
 17,  22,  10,   7, -10,  -5,  20,   8, 
 24,  17,  19,  11,  13,  -3, -11,   4, 
 21,  15,  27,  12,  13,   4,   6,  22, 
 17,  21,  21,  19,  10,   5,  -2,   2, 
 13,  13,   8,  14,   3,   2,  -2,  -1, 
  9,   3,  16,  19,   4,   0,   0,  14, 
  6,  15,  16,  14,   8,   5,  17, -12, 
};

constexpr std::array<int, 64> PST_BISHOP_EGAME = {
-12, -27,  -2,  -4,   2, -10, -12, -29, 
 -8,  -6,   5, -10, -10, -10,  -6, -13, 
  1, -14,  -1,  -7,  -4,  -1,   2,   2, 
 -4,   6,  14,   9,  16,   7,   0,   4, 
 -5,   0,  13,  20,  10,   9,  -5, -12, 
-16,  -5,   8,  10,  14,  -1,  -7, -16, 
-14, -23,  -9,  -2,   2, -13, -19, -31, 
-24, -11, -29,  -4,  -8, -22,  -6, -17, 
};

constexpr std::array<int, 64> PST_KNIGHT_EGAME = {
-53, -51,  -8, -26, -43, -24, -75, -104, 
-31, -11, -34,  -9, -17, -35, -33, -67, 
-31, -34,   1,   2, -18, -24, -33, -55, 
-23,  -3,  19,  16,  18,   3,  -3, -23, 
-25, -14,  13,  26,  12,  12,   6, -24, 
-36,  -5, -10,   9,   7,  -9, -31, -32, 
-47, -20, -17, -11, -11, -31, -26, -63, 
-32, -66, -26, -20, -33, -27, -63, -91, 
};

constexpr std::array<int, 64> PST_PAWN_EGAME = {
  0,   0,   0,   0,   0,   0,   0,   0, 
174, 162, 146, 109, 134, 114, 165, 195, 
 87,  93,  74,  48,  30,  28,  69,  74, 
 16,   1, -11, -22, -32, -22, -10,  -4, 
 -5, -13, -28, -35, -37, -39, -25, -26, 
-15, -16, -34, -20, -27, -34, -33, -34, 
 -2, -15, -13, -13, -12, -29, -29, -33, 
  0,   0,   0,   0,   0,   0,   0,   0, 
};
// clang-format on

constexpr const PST<int> PST_MGAME = {
    std::array<int, 64>{0}, PST_KING_MGAME,   PST_QUEEN_MGAME, PST_ROOK_MGAME,
    PST_BISHOP_MGAME,       PST_KNIGHT_MGAME, PST_PAWN_MGAME};

constexpr const PST<int> PST_EGAME = {
    std::array<int, 64>{0}, PST_KING_EGAME,   PST_QUEEN_EGAME, PST_ROOK_EGAME,
    PST_BISHOP_EGAME,       PST_KNIGHT_EGAME, PST_PAWN_EGAME};

constexpr int PSTVal(Side side, Piece piece, int sq) {
  return PST_MGAME[PieceType(piece)][(side == Side::WHITE) ? (sq ^ 56) : sq];
}

} // namespace standard

#endif
